[[plugins]]
repo = 'vim-scripts/rdark' # {{{
hook_add = '''
augroup Rdark
  autocmd!
  autocmd VimEnter * nested
        \ if !exists('g:gui_oni')
        \ | color rdark
        \ | endif
augroup END
'''
# }}}

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim' # {{{
# rev = 'next'
# build = 'bash install.sh'
# hook_add = '''
# let g:LanguageClient_autoStart = 0
# let g:LanguageClient_rootMakers = {
# \ '_': ['.git'],
# \ 'haskell': ['*.cabal', 'stack.yaml'],
# \ 'typescript': ['tsconfig.josn'],
# \ 'dockerfile': ['Dockerfile'],
# \ 'ruby': ['Gemfile', 'Rakefile'],
# \ 'scala': ['build.sbt'],
# \ }
# let g:LanguageClient_serverCommands = {
# \ 'lua': ['lua-lsp'],
# \ 'ocaml': ['ocaml-language-server', '--stdio'],
# \ 'haskell': ['stack', '--allow-different-user', 'exec', '--', 'hie-wrapper'],
# \ 'typescript': ['typescript-language-server', '--stdio'],
# \ 'typescript.tsx': ['typescript-language-server', '--stdio'],
# \ 'javascript': ['typescript-language-server', '--stdio'],
# \ 'sh': ['bash-language-server', 'start'],
# \ 'dockerfile': ['docker-langserver'],
# \ 'ruby': ['solargraph', 'stdio'],
# \ 'scala': ['scalameta_lsp'],
# \ }

# let g:LanguageClient_started = 0

# function s:LC_maps()
  # if has_key(g:LanguageClient_serverCommands, &filetype) && !g:LanguageClient_started
    # let g:LanguageClient_started = 1
    # LanguageClientStart
    # setlocal signcolumn=yes
    # setlocal hidden
    # nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    # map <Leader>lk :call LanguageClient#textDocument_hover()<CR>
    # map <Leader>lg :call LanguageClient#textDocument_definition()<CR>
    # map <Leader>lr :call LanguageClient#textDocument_rename()<CR>
    # map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
    # map <Leader>lb :call LanguageClient#textDocument_references()<CR>
    # map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
    # map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
  # endif
# endfunction

# augroup LanguageClientKeyconfig
  # autocmd!
  # autocmd FileType * call s:LC_maps()
# augroup END
# '''
# # }}}

# coc {{{
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

setlocal hidden
setlocal nobackup
setlocal nowritebackup
setlocal updatetime=300
setlocal signcolumn=yes

nmap <silent> <Leader>lk :call <SID>show_documentation()<CR>
nmap <silent> <Leader>la :CocAction<CR>
nmap <silent> <Leader>lg :call CocAction('jumpDefinition')<CR>
nmap <silent> <Leader>ld <Plug>(coc-type-definition)
nmap <silent> <Leader>li <Plug>(coc-implementation)
nmap <silent> <Leader>lr <Plug>(coc-rename)
nmap <silent> <Leader>lq <Plug>(coc-fix-current)
nmap <silent> <Leader>lb <Plug>(coc-references)
nmap <silent> <F5> :CocList --number-select<CR>
nmap <silent> <Leader>l= <Plub>(coc-format)

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" inoremap <silent><expr> <C-o> coc#refresh()

function! s:my_cr_function()
 return pumvisible() ? "\<c-y>" : "\<c-g>u\<CR>"
endfunction
inoremap <CR> <C-R>=<SID>my_cr_function()<CR>

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <silent> <Leader><Up> <Plug>(coc-diagnostic-prev)
nmap <silent> <Leader><Down> <Plug>(coc-diagnostic-next)

setlocal statusline+=%{coc#status()}
let g:neoformat = 0

autocmd ColorScheme * hi CocHighlightText ctermbg=blue cterm=bold,italic ctermfg=yellow
'''
# }}}

[[plugins]]
repo = 'Shougo/echodoc.vim'

[[plugins]]
repo = 'tpope/vim-sleuth' # {{{
hook_add = '''
setlocal tabstop=4
'''
# }}}

# [[plugins]]
# repo = "Shougo/deoplete.nvim" # {{{
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#enable_smart_case = 1
# let g:deoplete#auto_completion_start_length=3
# let g:deoplete#sources = {}
# let g:deoplete#sources._ = ['buffer', 'tag']
# if !exists('g:deoplete#keyword_patterns')
#   let g:deoplete#keyword_patterns = {}
# endif
# let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\w*'
# " let g:deoplete#keyword_patterns.tex = '\\?[a-zA-Z_]\w*'
# let g:deoplete#keyword_patterns.tex = ['\\?[a-zA-Z_]\w*', g:deoplete#keyword_patterns._]
# 
# if !exists('g:deopletes#omni#input_patterns')
#   let g:deoplete#omni#input_patterns = {}
# endif
# let g:deoplete#omni#input_patterns.tex = '\v\\\a*(ref|cite)\a*([^]]*\])?\{([^}]*,)*[^}]*'
# let g:deoplete#omni#input_patterns.ocaml = '[^. *\t]\.\w*\|\h\w*|#'
# 
# call deoplete#custom#option('sources', {
# \ 'tex' : ['buffer', 'dictionary', 'file', 'omni']
# \})
# 
# call deoplete#custom#var('omni', 'input_patterns', {
#           \ 'tex' : '\\(?:'
#               \ .  '\w*cite\w*(?:\s*\[[^]]*\]){0,2}\s*{[^}]*'
#               \ . '|includegraphics\*?(?:\s*\[[^]]*\]){0,2}\s*\{[^}]*'
#               \ . '|(?:include(?:only)?|input)\s*\{[^}]*'
#               \ . '|usepackage(\s*\[[^]]*\])?\s*\{[^}]*'
#               \ . '|documentclass(\s*\[[^]]*\])?\s*\{[^}]*'
#               \ . '|\w*'
#               \ .')',
#           \ 'ruby': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],
# \  })
# 
# inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<Tab>"
# inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-Tab>"
# inoremap <expr><BS> deoplete#mappings#smart_close_popup()."\<C-h>"
# inoremap <expr><C-c> deoplete#mappings#cancel_popup()
# function! s:my_cr_function()
#  return pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
# endfunction
# inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
# '''
# # }}}

# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# build = 'bash install.sh'

# [[plugins]]
# repo = 'equalsraf/neovim-gui-shim'

# [[plugins]]
# repo = 'Nymphium/luafiler' # {{{
# hook_add = '''
# let g:luafiler_do_not_warn_on_start = 1
# augroup LuafilerSettings
  # autocmd!
  # autocmd FileType * nnoremap <silent> WO :lua plugin.luafiler.open()<CR>
  # autocmd FileType * nnoremap <silent> WV :lua plugin.luafiler.open("v")<CR>
# augroup END
# '''
# }}}

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd BufEnter,VimEnter *
    \ let bufname = expand('<afile>')
    \| if isdirectory(bufname)
    \|   execute 'Defx -columns=git:mark:filename:type ' . bufname
    \| endif

autocmd BufWritePost * call defx#redraw()
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  call defx#custom#column('git', 'indicators', {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ })
 " Define mappings
  nnoremap <silent><buffer><expr> <CR>
 \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
 \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
 \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
 \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
 \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
 \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
 \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
 \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
 \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
 \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
 \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
 \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
 \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
 \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> h
 \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
 \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
 \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
 \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
 \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
 \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
 \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
 \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
 \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
 \ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'scrooloose/nerdcommenter' # {{{
hook_add = '''
let NERDSpaceDelims = 1
nmap <M-C> <Nop>
nmap <M-C> <Plug>NERDCommenterToggle
vmap <M-C> <Nop>
vmap <M-C> <Plug>NERDCommenterToggle
nmap <ESC>C <Nop>
nmap <ESC>C <Plug>NERDCommenterToggle
vmap <ESC>C <Nop>
vmap <ESC>C <Plug>NERDCommenterToggle
'''
# }}}

[[plugins]]
repo = 'tpope/vim-surround' # {{{

hook_add = '''
xmap " <Plug>VSurround"
xmap ' <Plug>VSurround'
xmap ( <Plug>VSurround)
xmap { <Plug>VSurround}
xmap < <Plug>VSurround>
xmap [ <Plug>VSurround]
'''
# }}}

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'tmhedberg/matchit' # {{{
hook_add = '''
augroup Matchit
autocmd!
autocmd FileType lua let b:match_words = '\<\(if\|function\|for\|while\)\>:\<\(\|then\|do\)\>:\<\(elseif\)\>:\<\(else\)\>:\<\(end\)\>'
autocmd FileType ruby let b:match_words = '\<\(module\|class\|def\|begin\|do\|if\|unless\|case\)\>:\<\(elsif\|when\|rescue\)\>:\<\(else\|ensure\)\>:\<end\>'
autocmd Filetype tex,vim let b:match_words = '（:）,【:】'
augroup END
'''
# }}}

# [[plugins]]
# repo = 'scrooloose/syntastic' # {{{
# hook_add = '''
# let g:syntastic_check_on_open = 0
# let g:syntastic_always_populate_loc_list = 1
# let g:syntastic_check_on_wq = 0
# let g:syntastic_loc_list_height = 3
# let g:syntastic_echo_current_error = 1
# let g:syntastic_enable_balloons = 1
# let g:syntastic_enable_highlighting = 1
# let g:syntastic_enable_signs=1
# let g:syntastic_auto_loc_list=2
# let g:syntastic_cpp_compiler = 'g++'
# let g:syntastic_cpp_compiler_options = '-Wall -Wextra'
# let g:syntastic_c_compiler = 'gcc'
# let g:syntastic_c_compiler_options = '-Wall -Wextra'
# let g:syntastic_ignore_files = ['\.tex$']
# let g:syntastic_lua_checkers = ["luac", "luacheck"]
# let g:syntastic_lua_luacheck_options = "-g -d -a -u -r"
# let g:syntastic_moon_checkers = ['mooncheck', 'moonc']
# let g:syntastic_moon_mooncheck_options = "-g -d -a -u -r"
# let g:syntastic_sh_checkers = ['shellcheck']
# let g:syntastic_sh_shellcheck_args = ['--exclude=SC2148']
# let g:syntastic_haskell_checkers = ['ghc-mod']
# let g:syntastic_ocaml_checkers = ['ocamlmerlin']
# let g:syntastic_scala_checkers = []
# '''

# hook_post_source = '''
# if !g:coc_enabled
  # let g:syntastic_started = 1
  # setlocal statusline+=\ %#warningmsg#
  # setlocal statusline+=%{SyntasticStatuslineFlag()}
  # setlocal statusline+=%*
# endif
# '''
# # }}}

[[plugins]]
repo = 'szw/vim-maximizer' # {{{
hook_add = '''
nnoremap <silent><F11> :MaximizerToggle<CR>
vnoremap <silent><F11> :MaximizerToggle<CR>gv
inoremap <silent><F11> <C-o>:MaximizerToggle<CR>
'''
# }}}

[[plugins]]
repo ='osyo-manga/vim-over' # {{{
hook_add = '''
let g:over_command_line_prompt = "Over > "
hi OverCommandLineCursor cterm=bold,reverse ctermfg=46
hi OverCommandLineCursorInsert cterm=bold,reverse ctermfg=46

nnoremap <silent> %% :OverCommandLine<CR>%s/
nnoremap <silent> %P y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!','g')<CR>!!gI<Left><Left><Left>
'''
# }}}

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'sbdchd/neoformat' # {{{
hook_add = '''
let g:neoformat_enabled_typescript = ['prettier']
let g:neoformat_enabled_javascript = ['prettier']
let g:neoformat_enabled_haskell = ['brittany', 'fourmolu']
let g:neoformat_enabled_ocaml = ['ocamlformat']

let g:neoformat_dune_dune = {
  \ 'exe': 'dune',
  \ 'args': ['format', '%'],
  \ 'stdin': 1,
\ }

let g:neoformat_haskell_fourmolu = {
  \ 'exe': 'fourmolu',
  \ 'args': ['-i', '%'],
  \ 'replace': 1,
  \ }

let g:neoformat_on_ft = ['scala', 'haskell', 'javascript', 'typescript', 'typescript.tsx', 'ocaml', 'c', 'ruby', 'ocaml', 'dune']
let g:neoformat = !get(g:, "coc_enabled", 1)

augroup Neofmt
  autocmd!
  autocmd BufWritePre *
    \  if g:neoformat && index(g:neoformat_on_ft, &filetype) >= 0
    \|   Neoformat
    \| endif
augroup END
'''
# }}}

# [[plugins]]
# repo = 'ensime/ensime-vim'

# hook_add = '''
# function EnsimeKeymaps()
  # nnoremap <buffer> <silent> <leader>t :EnType<CR>
  # vnoremap <buffer> <silent> <leader>t :EnType<CR>
# endfunction

# augroup EnsimeVim
  # autocmd!
  # autocmd BufWritePost *.scala silent :EnTypeCheck
  # autocmd FileType scala silent :call EnsimeKeymaps()
# augroup END
# '''

