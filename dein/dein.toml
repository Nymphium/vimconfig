[[plugins]]
repo = 'vim-scripts/rdark' # {{{
hook_add = '''
augroup Rdark
  autocmd!
  autocmd VimEnter * nested
        \ if !exists('g:gui_oni')
        \ | color rdark
        \ | endif
augroup END
'''
# }}}

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter' # {{{
merged = 0
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {"typescript", "haskell", "ocaml", "bash", "lua"},
  highlight = {
    enable = true,
    disable = {},
  },
}
EOF
'''
# }}}

# nvim-lsp {{{
[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'

[[plugins]]
repo = 'hrsh7th/cmp-buffer'

[[plugins]]
repo = 'hrsh7th/cmp-path'

[[plugins]]
repo = 'hrsh7th/cmp-cmdline'

[[pluginsp]]
repo = 'hrsh7th/nvim-cmp'
# }}}

# coc {{{
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# rev = 'release'
# on_i = 1
# merged = '0'
# hook_add = '''
# function! s:check_back_space() abort
  # let col = col('.') - 1
  # return !col || getline('.')[col - 1]  =~ '\s'
# endfunction

# autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

# function! s:show_documentation()
  # if (index(['vim','help'], &filetype) >= 0)
    # execute 'h '.expand('<cword>')
  # else
    # call CocAction('doHover')
  # endif
# endfunction

# setlocal hidden
# setlocal nobackup
# setlocal nowritebackup
# setlocal updatetime=300
# setlocal signcolumn=yes

# nmap <silent> <Leader>lk :call <SID>show_documentation()<CR>
# nmap <silent> <Leader>la <plug>(coc-fix-current)
# nmap <silent> <Leader>lg <plug>(coc-definition)
# nmap <silent> <Leader>ld <Plug>(coc-type-definition)
# nmap <silent> <Leader>li <Plug>(coc-implementation)
# nmap <silent> <Leader>lr <Plug>(coc-rename)
# nmap <silent> <Leader>lq <Plug>(coc-fix-current)
# nmap <silent> <Leader>lb <Plug>(coc-references)
# nmap <silent> <F5> :CocList --number-select<CR>
# nmap <silent> <Leader>l= <Plub>(coc-format)

# inoremap <silent><expr> <Tab>
      # \ pumvisible() ? "\<C-n>" :
      # \ <SID>check_back_space() ? "\<Tab>" :
      # \ coc#refresh()
# inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
# " inoremap <silent><expr> <C-o> coc#refresh()

# function! s:my_cr_function()
 # return pumvisible() ? "\<c-y>" : "\<c-g>u\<CR>"
# endfunction
# inoremap <CR> <C-R>=<SID>my_cr_function()<CR>

# autocmd CursorHold * silent call CocActionAsync('highlight')

# nmap <silent> <Leader><Up> <Plug>(coc-diagnostic-prev)
# nmap <silent> <Leader><Down> <Plug>(coc-diagnostic-next)

# setlocal statusline+=%{coc#status()}
# let g:neoformat = 0

# autocmd ColorScheme * hi CocHighlightText ctermbg=blue cterm=bold,italic ctermfg=yellow
# '''
# }}}

[[plugins]]
repo = 'Shougo/echodoc.vim'

[[plugins]]
repo = 'tpope/vim-sleuth' # {{{
hook_add = '''
setlocal tabstop=4
'''
# }}}

[[plugins]]
repo = 'Shougo/defx.nvim' # {{{
hook_add = '''
autocmd BufEnter,VimEnter *
    \ let bufname = expand('<afile>')
    \| if isdirectory(bufname)
    \|   execute 'Defx -columns=git:mark:filename:type ' . bufname
    \| endif

autocmd BufWritePost * call defx#redraw()
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  call defx#custom#column('git', 'indicators', {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Ignored'   : '☒',
    \ 'Deleted'   : '✖',
    \ 'Unknown'   : '?'
    \ })
 " Define mappings
  nnoremap <silent><buffer><expr> <CR>
 \ defx#do_action('open')
  nnoremap <silent><buffer><expr> c
 \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
 \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
 \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
 \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
 \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
 \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
 \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
 \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
 \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
 \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
 \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
 \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
 \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> h
 \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
 \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
 \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
 \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
 \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
 \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
 \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
 \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
 \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
 \ defx#do_action('change_vim_cwd')
endfunction
'''
# }}}

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'scrooloose/nerdcommenter' # {{{
hook_add = '''
let NERDSpaceDelims = 1
nmap <M-C> <Nop>
nmap <M-C> <Plug>NERDCommenterToggle
vmap <M-C> <Nop>
vmap <M-C> <Plug>NERDCommenterToggle
nmap <ESC>C <Nop>
nmap <ESC>C <Plug>NERDCommenterToggle
vmap <ESC>C <Nop>
vmap <ESC>C <Plug>NERDCommenterToggle
'''
# }}}

[[plugins]]
repo = 'tpope/vim-surround' # {{{

hook_add = '''
xmap " <Plug>VSurround"
xmap ' <Plug>VSurround'
xmap ( <Plug>VSurround)
xmap { <Plug>VSurround}
xmap < <Plug>VSurround>
xmap [ <Plug>VSurround]
'''
# }}}

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'tmhedberg/matchit' # {{{
hook_add = '''
augroup Matchit
autocmd!
autocmd FileType lua let b:match_words = '\<\(if\|function\|for\|while\)\>:\<\(\|then\|do\)\>:\<\(elseif\)\>:\<\(else\)\>:\<\(end\)\>'
autocmd FileType ruby let b:match_words = '\<\(module\|class\|def\|begin\|do\|if\|unless\|case\)\>:\<\(elsif\|when\|rescue\)\>:\<\(else\|ensure\)\>:\<end\>'
autocmd Filetype tex,vim let b:match_words = '（:）,【:】'
augroup END
'''
# }}}

[[plugins]]
repo = 'szw/vim-maximizer' # {{{
hook_add = '''
nnoremap <silent><F11> :MaximizerToggle<CR>
vnoremap <silent><F11> :MaximizerToggle<CR>gv
inoremap <silent><F11> <C-o>:MaximizerToggle<CR>
'''
# }}}

[[plugins]]
repo ='osyo-manga/vim-over' # {{{
hook_add = '''
let g:over_command_line_prompt = "Over > "
hi OverCommandLineCursor cterm=bold,reverse ctermfg=46
hi OverCommandLineCursorInsert cterm=bold,reverse ctermfg=46

nnoremap <silent> %% :OverCommandLine<CR>%s/
nnoremap <silent> %P y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!','g')<CR>!!gI<Left><Left><Left>
'''
# }}}

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'sbdchd/neoformat' # {{{
hook_add = '''
let g:neoformat_enabled_typescript = ['prettier']
let g:neoformat_enabled_javascript = ['prettier']
let g:neoformat_enabled_haskell = ['brittany', 'fourmolu']
let g:neoformat_enabled_ocaml = ['ocamlformat']

let g:neoformat_dune_dune = {
  \ 'exe': 'dune',
  \ 'args': ['format', '%'],
  \ 'stdin': 1,
\ }

let g:neoformat_haskell_fourmolu = {
  \ 'exe': 'fourmolu',
  \ 'args': ['-i', '%'],
  \ 'replace': 1,
  \ }

let g:neoformat_on_ft = ['scala', 'haskell', 'javascript', 'typescript', 'typescript.tsx', 'ocaml', 'c', 'ruby', 'ocaml', 'dune']
let g:neoformat = !get(g:, "coc_enabled", 1)

augroup Neofmt
  autocmd!
  autocmd BufWritePre *
    \  if g:neoformat && index(g:neoformat_on_ft, &filetype) >= 0
    \|   Neoformat
    \| endif
augroup END
'''
# }}}

